<?php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Mail\StaffAccountCreatedMail;
use App\Models\Branch;
use App\Models\Staff;
use App\Models\StaffWorkdays;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Illuminate\Validation\Rule;

class ManageStaffController extends Controller
{
    public function staffs()
    {
        // Load staff with user, branch, and workDays only
        $staffs = Staff::with(['user', 'branch', 'workDays'])->get();

        return view('admin.staff.staff', compact('staffs'));
    }

    public function viewStaffs($id)
    {
        $staff    = Staff::with(['user', 'workDays', 'branch'])->findOrFail($id);
        $branches = Branch::all();
        return view('admin.staff.viewStaff', compact('staff', 'branches'));
    }

    public function AddStaffs()
    {
        $branches = Branch::all();
        return view('admin.staff.addStaff', compact('branches'));
    }

    public function updateStaff(Request $request, $id)
    {
        $staff = Staff::with(['user', 'workDays'])->findOrFail($id);

        $validated = $request->validate([
            // Personal
            'first_name'    => 'required|string|max:100',
            'last_name'     => 'required|string|max:100',
            'phone'         => 'required|string|max:20',
            'email'         => [
                'required',
                'email',
                Rule::unique('users', 'email')->ignore($staff->user?->id),
            ],
            'date_of_birth' => 'required|date',
            'gender'        => ['required', Rule::in(['male', 'female', 'other'])],
            'address'       => 'required|string',

            // Status & Branch
            'status'        => ['required', Rule::in(['active', 'inactive', 'on-leave'])],
            'branch_id'     => 'required|exists:branch,id',

            // Work Days
            'shift'         => ['required', Rule::in(['day', 'night', 'regular'])],
            'workDays'      => 'required|array|min:1',
            'workDays.*'    => ['required', Rule::in([
                'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday',
            ])],
        ]);

        // Update Staff
        $staff->update($request->only([
            'first_name', 'last_name', 'phone', 'date_of_birth',
            'gender', 'address', 'status', 'branch_id',
        ]));

        // Update User (email only)
        if ($staff->user) {
            $staff->user->update([
                'email' => $request->input('email'),
            ]);
        }

        // Update work days
        $staff->workDays()->delete();
        foreach ($validated['workDays'] as $day) {
            StaffWorkDays::create([
                'staff_id' => $staff->id,
                'day'      => $day,
                'shift'    => $request->shift,
            ]);
        }

        return redirect()->back()->with('swal', [
            'icon'  => 'success',
            'title' => 'Update Successful!',
            'text'  => "Staff  updated successfully.",
        ]);
    }
    public function storeStaff(Request $request)
    {
        $validated = $request->validate([
            // Personal
            'firstName'   => 'required|string|max:100',
            'lastName'    => 'required|string|max:100',
            'phone'       => 'required|string|max:20',
            'email'       => 'required|email|unique:users,email',
            'dateOfBirth' => 'required|date',
            'gender'      => ['required', Rule::in(['male', 'female'])],
            'address'     => 'required|string',

            // Employment Info
            'status'      => ['required', Rule::in(['active', 'inactive', 'on-leave'])],
            'branch_id'   => 'required|exists:branch,id',

            // Schedule
            'shift'       => ['required', Rule::in(['day', 'night'])],
            'workDays'    => 'required|array|min:1',
            'workDays.*'  => ['required', Rule::in([
                'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday',
            ])],
        ]);

        // ðŸ”¹ Generate secure random password
        $randomPassword = $this->generatePassword(10);

        DB::transaction(function () use ($validated, $randomPassword) {
            // 1. Create User
            $user = User::create([
                'email'    => $validated['email'],
                'password' => Hash::make($randomPassword),
                'role'     => 'staff',
            ]);

            // 2. Create Staff (staff_id auto-generated by model boot())
            $staff = Staff::create([
                'user_id'       => $user->id,
                'first_name'    => $validated['firstName'],
                'last_name'     => $validated['lastName'],
                'phone'         => $validated['phone'],
                'date_of_birth' => $validated['dateOfBirth'],
                'gender'        => $validated['gender'],
                'address'       => $validated['address'],
                'status'        => $validated['status'],
                'branch_id'     => $validated['branch_id'],
            ]);

            // 3. Save Work Days (with shift)
            foreach ($validated['workDays'] as $day) {
                StaffWorkDays::create([
                    'staff_id' => $staff->id,
                    'day'      => $day,
                    'shift'    => $validated['shift'],
                ]);
            }

            // 4. Send Email with random password
            Mail::to($user->email)->send(new StaffAccountCreatedMail($user, $randomPassword));
        });

        return redirect()->route('staffs')->with('swal', [
            'icon'  => 'success',
            'title' => 'Added Successfully!',
            'text'  => 'New staff added successfully!',
        ]);
    }

/*
 * Generate secure random password (with upper, lower, number, special char)
 */
    private function generatePassword($length = 10)
    {
        $lower   = 'abcdefghijklmnopqrstuvwxyz';
        $upper   = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $numbers = '0123456789';
        $special = '@$!%*?&';

        // siguradong may at least 1 from each group
        $password = $lower[random_int(0, strlen($lower) - 1)];
        $password .= $upper[random_int(0, strlen($upper) - 1)];
        $password .= $numbers[random_int(0, strlen($numbers) - 1)];
        $password .= $special[random_int(0, strlen($special) - 1)];

        // dagdagan hanggang sa length
        $all = $lower . $upper . $numbers . $special;
        for ($i = strlen($password); $i < $length; $i++) {
            $password .= $all[random_int(0, strlen($all) - 1)];
        }

        // shuffle para hindi predictable ang positions
        return str_shuffle($password);
    }

    public function deleteStaff($id)
    {
        try {
            DB::transaction(function () use ($id) {
                $staff = Staff::with(['user', 'workDays'])->findOrFail($id);

                // Delete workdays first
                $staff->workDays()->delete();

                // Delete associated user
                $staff->user()?->delete();

                // Delete main staff record
                $staff->delete();
            });

            return redirect()->route('staffs')->with('swal', [
                'icon'  => 'success',
                'title' => 'Deletion Successful!',
                'text'  => 'Staff deleted successfully.',
            ]);
        } catch (\Throwable $e) {
            return redirect()->back()->with('swal', [
                'icon'  => 'error',
                'title' => 'Deletion Failed!',
                'text'  => 'Failed to delete staff: ' . $e->getMessage(),
            ]);
        }
    }

    public function updateSchedule(Request $request, $id)
    {
        $validated = $request->validate([
            'shift'      => ['required', Rule::in(['Day', 'Night'])],
            'workDays'   => 'required|array|min:1',
            'workDays.*' => ['required', Rule::in([
                'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday',
            ])],
        ]);

        $staff = Staff::with('workDays')->findOrFail($id);

        // âœ… Clear old workdays then insert new ones with shift
        $staff->workDays()->delete();

        foreach ($validated['workDays'] as $day) {
            $staff->workDays()->create([
                'day'   => $day,
                'shift' => $validated['shift'], // âœ… store shift with each day
            ]);
        }

        // Reload for notification data
        $staff->load('workDays');

        // ðŸ”” Notify staff via user relation
        if ($staff->user) {
            $staff->user->notify(new \App\Notifications\StaffScheduleUpdated($staff));
        }

        return redirect()->back()->with('swal', [
            'icon'  => 'success',
            'title' => 'Update Successful!',
            'text'  => "Schedule for  updated successfully.",
        ]);
    }

    public function toggleActive($id)
    {
        $staff = Staff::with('user')->findOrFail($id);

        if ($staff->user) {
            // toggle is_active
            $staff->user->is_active = ! $staff->user->is_active;
            $staff->user->save();
        }

        return redirect()->back()->with('swal', [
            'icon'  => 'success',
            'title' => 'Account Updated',
            'text'  => 'Staff account has been ' . ($staff->user->is_active ? 'activated' : 'deactivated') . '.',
        ]);
    }

}
